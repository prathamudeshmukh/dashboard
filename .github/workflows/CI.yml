name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
env:
  CLERK_SECRET_KEY: ${{ secrets.PRODUCTION_CLERK_SECRET_KEY }}
  NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.PRODUCTION_NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
  CLERK_WEBHOOK_SECRET: ${{ secrets.PRODUCTION_CLERK_WEBHOOK_SECRET }}
  ENCRYPTION_KEY: ${{ secrets.PRODUCTION_ENCRYPTION_KEY }}
  GRAPE_STUDIO_KEY: ${{ secrets.PRODUCTION_GRAPE_STUDIO_KEY }}
  DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
  INNGEST_BASE_URL: https://api.inngest.com
  HETZNER_HOST: ${{ secrets.HETZNER_HOST }}

jobs:
  build:
    strategy:
      matrix:
        node-version: [22.6] # Need to use 22.6 due to Next.js build errors: https://github.com/vercel/next.js/issues/69263
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    name: Build with ${{ matrix.node-version }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
      - run: npm ci
      - name: Set Preview Environment Variables for develop merge
        if: github.event_name == 'pull_request' && github.base_ref == 'main' || github.event_name == 'push' && github.ref_name == 'develop'
        run: |
          echo "CLERK_SECRET_KEY=${{ secrets.PREVIEW_CLERK_SECRET_KEY }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.PREVIEW_NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}" >> $GITHUB_ENV
          echo "CLERK_WEBHOOK_SECRET=${{ secrets.PREVIEW_CLERK_WEBHOOK_SECRET }}" >> $GITHUB_ENV
          echo "ENCRYPTION_KEY=${{ secrets.PREVIEW_ENCRYPTION_KEY }}" >> $GITHUB_ENV
          echo "GRAPE_STUDIO_KEY=${{ secrets.PREVIEW_GRAPE_STUDIO_KEY }}" >> $GITHUB_ENV
          echo "DATABASE_URL=${{ secrets.PREVIEW_DATABASE_URL }}" >> $GITHUB_ENV
          echo "INNGEST_BASE_URL= https://api.inngest.com" >> $GITHUB_ENV
          echo "HETZNER_HOST=${{ secrets.HETZNER_HOST }}" >> $GITHUB_ENV
      # TODO: Run database migration only on develop or main branch
      - name: Run databse migrations
        if: github.event_name == 'push'
        run: npm run db:migrate && npm run db:seed

      - run: npm run build

      # Build worker for deployment
      - name: Build worker
        if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')
        run: npm run worker:build

      # Upload worker build as artifact
      - name: Upload worker build
        if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')
        uses: actions/upload-artifact@v4
        with:
          name: worker-build
          path: |
            dist/
            src/inngest/
            src/types/
            src/service/
            package.json
            package-lock.json
            tsconfig.json
            docker-compose.hetzner.yml
            Dockerfile.worker
          retention-days: 1

  test:
    strategy:
      matrix:
        node-version: [20.x]

    name: Run all tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Retrieve Git history, needed to verify commits
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
      - run: npm ci
      - name: Set Preview Environment Variables for PRs
        if: github.event_name == 'pull_request' && github.base_ref == 'main' || github.event_name == 'push' && github.base_ref == 'develop'
        run: |
          echo "CLERK_SECRET_KEY=${{ secrets.PREVIEW_CLERK_SECRET_KEY }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.PREVIEW_NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}" >> $GITHUB_ENV
          echo "CLERK_WEBHOOK_SECRET=${{ secrets.PREVIEW_CLERK_WEBHOOK_SECRET }}" >> $GITHUB_ENV
          echo "ENCRYPTION_KEY=${{ secrets.PREVIEW_ENCRYPTION_KEY }}" >> $GITHUB_ENV
          echo "GRAPE_STUDIO_KEY=${{ secrets.PREVIEW_GRAPE_STUDIO_KEY }}" >> $GITHUB_ENV
          echo "DATABASE_URL=${{ secrets.PREVIEW_DATABASE_URL }}" >> $GITHUB_ENV

      - name: Build Next.js for E2E tests
        run: npm run build

      - if: github.event_name == 'pull_request'
        name: Validate all commits from PR
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

      - name: Linter
        run: npm run lint

      - name: Type checking
        run: npm run check-types

      - name: Run unit tests
        run: npm run test -- --coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4

  deploy-worker:
    name: Deploy Worker to Hetzner
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')

    steps:
      - uses: actions/checkout@v3

      # Download the pre-built worker artifacts
      - name: Download worker build
        uses: actions/download-artifact@v4
        with:
          name: worker-build
          path: ./worker-build

      - name: Set environment variables for staging
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
          echo "WORKER_PORT=3002" >> $GITHUB_ENV
          echo "HETZNER_HOST=${{ secrets.HETZNER_HOST }}" >> $GITHUB_ENV
          echo "HETZNER_USER=${{ secrets.HETZNER_USER }}" >> $GITHUB_ENV
          echo "HETZNER_PROJECT_PATH=/home/${{ secrets.HETZNER_USER }}/inngest-worker-staging" >> $GITHUB_ENV

      - name: Set environment variables for production
        if: github.ref == 'refs/heads/main'
        run: |
          echo "DEPLOY_ENV=production" >> $GITHUB_ENV
          echo "WORKER_PORT=3003" >> $GITHUB_ENV
          echo "HETZNER_HOST=${{ secrets.HETZNER_HOST }}" >> $GITHUB_ENV
          echo "HETZNER_USER=${{ secrets.HETZNER_USER }}" >> $GITHUB_ENV
          echo "HETZNER_PROJECT_PATH=/home/${{ secrets.HETZNER_USER }}/inngest-worker-production" >> $GITHUB_ENV

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HETZNER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HETZNER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Hetzner
        run: |
          echo "Deploying worker to $DEPLOY_ENV environment..."

          # Create project directory on server
          ssh $HETZNER_USER@$HETZNER_HOST "mkdir -p $HETZNER_PROJECT_PATH"

          echo "Creating compressed archive of worker files"
          # Create a compressed tar archive for faster transfer
          tar -czf worker-build.tar.gz -C ./worker-build .

          echo "Copy pre-built worker files to server"
          # Copy compressed archive to server
          scp worker-build.tar.gz $HETZNER_USER@$HETZNER_HOST:$HETZNER_PROJECT_PATH/

          echo "Extract files and install dependencies on server"
          # Extract files and install production dependencies on server
          ssh $HETZNER_USER@$HETZNER_HOST "cd $HETZNER_PROJECT_PATH && tar -xzf worker-build.tar.gz && rm worker-build.tar.gz && npm ci --only=production"

          echo "Copy deployment script to server and execute"
          # Copy deployment script to server and execute
          scp scripts/deploy-worker.sh $HETZNER_USER@$HETZNER_HOST:/tmp/
          ssh $HETZNER_USER@$HETZNER_HOST "chmod +x /tmp/deploy-worker.sh && DEPLOY_ENV=$DEPLOY_ENV HETZNER_PROJECT_PATH=$HETZNER_PROJECT_PATH GITHUB_REF_NAME=${{ github.ref_name }} /tmp/deploy-worker.sh"

      - name: Verify deployment
        run: |
          echo "Verifying worker deployment..."
          sleep 30

          if curl -f "http://$HETZNER_HOST:$WORKER_PORT/health"; then
            echo "✅ Worker is healthy and responding!"
          else
            echo "❌ Worker health check failed!"
            exit 1
          fi

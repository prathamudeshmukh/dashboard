# Multi-stage build for efficient worker deployment
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files
COPY package.json package-lock.json* ./
RUN npm ci --only=production

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build TypeScript and copy only necessary files
RUN npm run build:worker

# Production image, copy all the files and run the worker
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV PORT=3001

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy only necessary files for worker
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

# Copy environment-specific files
COPY --from=builder /app/src/inngest ./src/inngest
COPY --from=builder /app/src/libs ./src/libs
COPY --from=builder /app/src/types ./src/types
COPY --from=builder /app/src/service ./src/service
COPY --from=builder /app/tsconfig.json ./tsconfig.json

USER nextjs

EXPOSE 4001

ENV PORT 4001

CMD ["npm", "run", "worker:start"]
